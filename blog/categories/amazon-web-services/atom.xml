<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Amazon Web Services | Ivan Vari]]></title>
  <link href="https://ivanvari.com/blog/categories/amazon-web-services/atom.xml" rel="self"/>
  <link href="https://ivanvari.com/"/>
  <updated>2022-04-21T19:02:13+02:00</updated>
  <id>https://ivanvari.com/</id>
  <author>
    <name><![CDATA[Ivan Vari]]></name>
    <email><![CDATA[ivan.adam.vari@ivanvari.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWS EKS StackSet Created Cluster Access Recovery]]></title>
    <link href="https://ivanvari.com/aws-eks-stackset-cluster-access-recovery/"/>
    <updated>2019-08-16T14:23:34+02:00</updated>
    <id>https://ivanvari.com/aws-eks-stackset-cluster-access-recovery</id>
    <content type="html"><![CDATA[<p>Kubernetes is contagious and nowadays hard to ignore. So we decided to look into EKS to see how it would work for
our microservice suite. As of today, there are 2 ways of creating (official) an EKS cluster: <code>eksctl</code> via CLI or
point and click through the Web-UI.</p>

<p>We have multiple accounts and use services in multiple regions, so I developed a custom CloudFormation template to
build our EKS cluster with StackSets. While this worked perfectly, I found an issue of not being able to access the
cluster at all.</p>

<!--more-->


<p><a href="https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html#unauthorized" target="_blank">It turned out to be perfectly normal</a>,
since when an Amazon EKS cluster is created, the IAM entity (user or role) that creates the cluster is added to the
Kubernetes RBAC authorization table as the administrator <em>(with system:master permissions)</em>. Initially, only that IAM
user (initiated the cluster creation) can make calls to the Kubernetes API server using <code>kubectl</code>.</p>

<h2>About StackSets</h2>

<p><a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html" target="_blank">The basics of StackSets,</a>
is that you create a role <strong>AWSCloudFormationStackSetAdministrationRole</strong> on your <strong>MASTER</strong> account (where the StackSet
is launched from) and a role <strong>AWSCloudFormationStackSetExecutionRole</strong> on your <strong>TARGET</strong> account(s) where StackSets
will manage CloudFormation stacks for you.</p>

<h2>Assume role setup</h2>

<p>So in this case, you need to make sure that your IAM user entity can assume (temporarily) the <strong>AWSCloudFormationStackSetExecutionRole</strong>.
This can be done multiple ways, but the easiest would be to create a TEMP group, attach an inline policy to it and at
completion, make your IAM user member of this TEMP group.</p>

<p>The inline policy for your TEMP group:</p>

<pre><code class="json">{
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Resource": [
              "arn:aws:iam::123456789100:role/AWSCloudFormationStackSetExecutionRole",
            ],
            "Effect": "Allow"
          }
        ]
}
</code></pre>

<p>The <code>&lt;123456789100&gt;</code> number is YOUR target account ID where the EKS cluster is created.</p>

<p>Create a TEMP AWS config entry:</p>

<pre><code class="bash">$ vim ~/.aws/config

[profile eks]
region = eu-central-1
role_arn = arn:aws:iam::123456789100:role/AWSCloudFormationStackSetExecutionRole
source_profile = &lt;your_normal_iam_profile_name&gt;
</code></pre>

<p>Test your assume role before proceeding:</p>

<pre><code class="bash">$ aws --profile eks sts assume-role --role-arn arn:aws:iam::123456789100:role/AWSCloudFormationStackSetExecutionRole --role-session-name test
</code></pre>

<h2>Update Kubernetes RBAC</h2>

<p><a href="https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html" target="_blank">Get the ConfigMap template</a> from AWS:</p>

<pre><code class="bash">$ curl -o aws-auth-cm.yaml https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2019-02-11/aws-auth-cm.yaml
</code></pre>

<p>Edit it:</p>

<p>
<code>YAML
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: arn:aws:iam::123456789100:role/StackSet-EKS-c4c34dcd-45as-11-NodeInstanceRole-34F45DD54RSKK
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes
    - rolearn: arn:aws:iam::123456789100:role/Administrator
      username: admin
      groups:
        - system:masters
</code>
</p>

<p>The first element of the <code>mapRoles</code> is required for the worker nodes, so they can join the cluster automatically.
For this, you need to get the ARN of the InstanceRole that is attached to your nodes, normally it is generated
on the fly when the stack is created.</p>

<p>The second element is our required admin access details. In my case a special role <code>Administrator</code>, that only certain
users can assume, but <a href="https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html"
target="_blank">you could also add IAM user arn.</a></p>

<p>When ready, get a copy of your cluster config with your new TEMP profile, then update the cluster:</p>

<pre><code class="bash">$ aws --profile eks --region eu-central-1 eks update-kubeconfig --name &lt;eks cluster name you created&gt;
$ kubectl apply -f aws-auth-cm.yaml
</code></pre>

<p>At completion, delete the kube config you got with your TEMP profile, get a new one with your normal
aws profile. Alternatively, edit the config and update the AWS_PROFILE key at the bottom&hellip;</p>

<pre><code>$ rm ~/.kube/config
$ aws --profile &lt;normal aws profile name&gt; --region eu-central-1 eks update-kubeconfig --name &lt;eks cluster name you created&gt;
</code></pre>

<p>From this point on, your normal IAM user profile should be able to access the cluster:</p>

<pre><code class="bash">$ kubectl get svc
$ kubectl describe configmap -n kube-system aws-auth
$ kubectl get namespace
$ kubectl get nodes
</code></pre>

<h2>Clean up</h2>

<p>Do not forget to remove the TEMP group and the TEMP AWS config profile at completion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS MFA Enabled Console With Automated One Time Password]]></title>
    <link href="https://ivanvari.com/aws-console-mfa-1password-otp-automation/"/>
    <updated>2019-08-14T23:18:17+02:00</updated>
    <id>https://ivanvari.com/aws-console-mfa-otp-automation</id>
    <content type="html"><![CDATA[<p>Moving to AWS is challenging and fun at the same time. Since our migration progresses well, we have enabled enforced MFA
for IAM accounts, that have Administrator access.</p>

<p>With 1Password OTP, it is simple to setup and easy to use in the WebUI, but I felt there is room for an improvement
for the API calls, <code>awscli</code> commands over my console session so I don&rsquo;t have to cut and paste every time my session
token expires.</p>

<!--more-->


<p>First thing first, this requires <code>macOS</code> (OSX) operating system, <code>bash</code>, <code>awscli</code>, <code>jq</code> utilities and <code>1Password</code>.
I assume that, the reader is familiar with the AWS tools and services used here including but not limited to IAM
access, API keys, session tokens and so on.</p>

<h2>AWS config</h2>

<pre><code class="bash">$ vim .aws/credentials

[mysession-mfa]
aws_access_key_id = XXXXXXXXXXXXXXXXXXXX
aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

[mysession]
aws_access_key_id =
aws_secret_access_key =
</code></pre>

<p><code>mysession-mfa</code> is the profile name for your IAM access, you should already have an API key and secret configured. Since
our MFA is enforced (the policy used for that is out of the scope of this post), this is very limited. I can only change
my password, set MFA device and basics like that, so we only use it for MFA authentication, nothing else.</p>

<p><code>mysession</code> is the profile name, that will be MFA authenticated and once done, allow me to switch to my Administrator
role and become basically admin user of our account. This has NO key and secret configured, just a blank placeholder.</p>

<h2>System requirements</h2>

<p>Ensure you have <code>bash</code> as your shell, have <code>jq</code> and at last but least have <code>awscli</code> installed. The name of your <code>1Password</code>
wallet entry, where you have the OTP configured is also crucial. I tend to add the profile name to the title (in brackets)
so it is easy to find: &lt;<strong>AWS IAM (mysession)</strong>></p>

<h2>The bash function snippet</h2>

<pre><code class="bash">$ vim ~/.bashrc

aws_mfa_auth () {
    accountid=${1:-"123456789000"}
    loginid=${2:-"first.last@company.com"}
    profileid=${3:-"mysession"}

    printf "Using account: $accountid\n"
    printf "Using login: $loginid\n"
    printf "Using profile: $profileid\n"

    AWS_MFA_ARN="arn:aws:iam::$accountid:mfa/$loginid"
    AWS_MFA_SESSION_DURATION="28800"

    osascript -e "tell application \"System Events\" to tell process \"1Password mini\"" \
              -e "open location \"onepassword://extension/search/$profileid\"" \
              -e "end tell" \
              -e "delay 1" \
              -e "tell application \"System Events\" to tell process \"1Password mini\"" \
              -e "keystroke \"c\" using {command down, shift down, control down}" \
              -e "end tell" \
              -e "delay 1"

    authcode=$(pbpaste)

    output=$(aws --profile ${profileid}-mfa sts get-session-token --serial-number ${AWS_MFA_ARN} --duration-seconds ${AWS_MFA_SESSION_DURATION} --token-code $authcode)

    AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' &lt;&lt;&lt; $output)
    AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' &lt;&lt;&lt; $output)
    AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' &lt;&lt;&lt; $output)

    aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} --profile $profileid
    aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} --profile $profileid
    aws configure set aws_session_token ${AWS_SESSION_TOKEN} --profile $profileid

    (sleep ${AWS_MFA_SESSION_DURATION} &amp;&amp; osascript -e "display notification \"MFA token expired\" with title \"AWS $profileid\"" &amp;)
    exit 0
  }
</code></pre>

<p>As shown, the  <code>account</code>, <code>login</code> and <code>session</code> IDs have defaults but overridable. I tend to set the session duration to
8+ hours so I don&rsquo;t have to authenticate multiple times a day especially when we are in heavy development.</p>

<p><code>osascript</code> takes care of fetching the OTP password from the correct wallet entry and at completion, <code>awscli</code> updates
the placeholder entry with the temp API key and secret.</p>

<p>The last part is bonus: a basic desktop notification that the session token expired.</p>

<p>Finally, just watch it doing its thing&hellip;</p>

<pre><code class="bash">$ aws_mfa_auth
</code></pre>

<p>Once the shell window closed, you could open another and try anything that you have permissions for BUT remember to use
your MFA session profile like this:</p>

<pre><code class="bash">$ aws ec2 describe-instances --region eu-central-1 --profile mysession --query 'Reservations[*].Instances[*].[InstanceId,Tags[?Key==`Name`].Value|[0],State.Name,PrivateIpAddress,PublicIpAddress]' --output text | sort -k2 | column -t
</code></pre>

<p>This would list all running EC2 instances in a nice, column sorted window.</p>

<h2>Gotchas</h2>

<p>As of today, there is one issue that I have had no time to bypass yet. This solution does not wait for the wallet to be
unlocked so if it is, it bombs out after few seconds. In the meantime, make sure <strong>your wallet is unlocked</strong> before
running the function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Networks Over VPN With Amazon VPC]]></title>
    <link href="https://ivanvari.com/integrating-networks-vpn-amazon-vpc/"/>
    <updated>2014-05-19T00:21:58+02:00</updated>
    <id>https://ivanvari.com/integrating-networks-vpn-amazon-vpc</id>
    <content type="html"><![CDATA[<p><a href="https://aws.amazon.com/vpc/" target="_blank">Amazon VPC</a> has been out for some time offering full control of isolated local networking in the cloud.
This means that you can have your own private subnet in the cloud, have control over what private IPs your instances are going to use, change the instance type,
should your resource requirements increase and so forth.</p>

<p>This guide is going to be technical, intended for experienced professionals where I will be discussing options and solutions to securely integrate your onsite
(private) LANs with Amazon VPC. It is based on OpenVPN client running on an instance inside VPC, connecting to my remote branch firewall running pfSense 2.1.3
and OpenVPN server. The point-to-point tunnel between the client / server is 2-way, both the client and the server expose their local networks and route traffic
to the other side accordingly. But first, let&rsquo;s take a look at what other option we have.</p>

<!--more-->


<h2>Amazon VPC VPN</h2>

<p>This is built into VPC and utilizes IPsec which operates on OSI model layer 3 and 4. This technology has been out there for long time, considered fairly secure
and supported on many hardware appliances from most well known vendors. Since it operates on lower layer of the OSI model, it&rsquo;s not intended for end users such as
desktop computers, mobile devices, it&rsquo;s more suitable for connecting networks aka site-to-site VPN.</p>

<h4>Features and Benefits</h4>

<ol>
<li>Secure. In fact, it was not affected by the recently discovered <a href="http://heartbleed.com" target="_blank">Heartbleed</a> bug of OpenSSL as it&rsquo;s using
 crypto built into the kernel.</li>
<li>Supports dynamic route management with iBGP, suitable for corporate networks with lots of local LANs.</li>
<li>Somewhat easy to implement, widely supported on many hardware platforms, appliances as well as open source software such as
 <a href="https://www.openswan.org" target="_blank">Openswan</a> or <a href="https://www.strongswan.org" target="_blank">strongSwan</a>.</li>
<li><a href="https://aws.amazon.com/vpc/pricing/" target="_blank">Cheap</a>. Currently it&rsquo;s approximately ~$1 / per day depending on region.</li>
<li>It&rsquo;s really the easiest, simplest, out of box solution at this time of writing.</li>
</ol>


<p>There is a few good guides out there to get you started, however the easiest and most up-to-date is on
<a href="https://docs.openvpn.net/how-to-tutorialsguides/administration/extending-vpn-connectivity-to-amazon-aws-vpc-using-aws-vpc-vpn-gateway-service" target="_blank">OpenVPN&rsquo;s website</a>.</p>

<h2>VPN terminated on an EC2 Instance inside your VPC</h2>

<p>While it does share some features with IPsec, there are a couple of special ones that apply to OpenVPN:</p>

<ul>
<li>Cost savings. Yes, $1 a day is cheap and I have a supported hardware at my branch endpoint, BUT I already have a requirement to run an instance 24/7 inside my VPC
doing DNS, NTP, git, etc. Adding a VPN and routing functionality on top of those are not hard and just makes sense. I would rather spend that $1 / day on other great
services such as S3 storage or CloudWatch.</li>
<li>Internet availability inside VPC. While the IPsec VPN is superb, it does not provide you internet for your VPC resources, VPC meant to be private, no public traffic
in / out. So if I have to have an instance doing SNAT for outgoing Internet inside the VPC, then why not terminate the VPN on the same instance?</li>
</ul>


<h4>Build your VPC</h4>

<p><img src="https://ivanvari.com/images/2014-05/24F4919D-CEFE-48D3-A811-D6BBDC7D2CF9.png" /></p>

<p>I will not going into too much detail here, just share the important bits I encountered during my setup. The Amazon guide is well written, please read it for full understanding
of the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario2.html" target="_blank">concept</a>.</p>

<ul>
<li>Create a VPC with a preferably /16 mask. eg: <code>10.0.0.0/16</code> (Note: CIDR mask must be between /16 and /28)</li>
<li>Create at least 2 subnets that overlap with your the VPC CIDR mask, preferably /24. eg: <code>10.0.0.0/24</code>, <code>10.0.1.0/24</code>. One will be your private LAN with outgoing only Internet,
the other public with in and outgoing Internet.</li>
<li>Create a VPC &ldquo;Internet Gateway&rdquo;, attach it to your VPC.</li>
<li>Ignore &ldquo;Network ACL&rdquo; for now, defaults are fine.</li>
</ul>


<p>Pick a private IP address from your public /24 subnet you created in your VPC. eg: <code>10.0.0.8</code> This will be the internal address for your EC2 router. <em>While you cannot use
static private IP addresses inside VPC at this time of writing, you can associate certain addresses to instances. They still use DHCP but always get the same address, most
likely via MAC address mapping.</em></p>

<ul>
<li>Associate an &ldquo;Elastic IP Address&rdquo; aka public IP for your VPC if you have no free available. Use &ldquo;network interface&rdquo; association since we have no instance running yet,
and use the private IP you picked above. This essentially creates a &ldquo;network interface&rdquo; object and adds your selected public / private IPs to it.</li>
<li>Create a DHCP option set (optional) if you want to dish out your own DNS servers, domain names, etc. for your VPC instances, but it&rsquo;s not required for the VPN routing.</li>
<li>Make sure the security group attached to your VPC has port 22 open for 0.0.0.0/0. This is important initially for being able to reach your newly created &ldquo;router&rdquo; instance
via the public elastic IP until you sort out the internal routing, firewalling, VPN, etc.</li>
<li>You will have a default &ldquo;route&rdquo; object attached to your VPC, and it will be set to &ldquo;Main&rdquo;. I recommend to leave that untouched which routes only it&rsquo;s own VPC traffic
by default. It&rsquo;s important for security reasons because &ldquo;Main" always applies to a subnets that are not associated with any custom "route&rdquo; object.</li>
</ul>


<p>Then, create a custom &ldquo;route&rdquo; object, associate that with your &ldquo;public&rdquo; VPC subnet where the VPN instance resides. eg: <code>10.0.0.0/24</code>. and add your default route to it:</p>

<pre><code class="bash">0.0.0.0/0          igw-yourid
</code></pre>

<p>This essentially gives you internet access for outgoing traffic.</p>

<p>NOTE: networks available inside your VPN EC2 instance (aka networks on the far side of your OpenVPN tunnel) will not be available for any other other instance you launch
into this &ldquo;public&rdquo; subnet of your VPC. If you need to reach any of those by their internal VPC IP, you will have to add them to the custom &ldquo;route&rdquo; object you associated
with the &ldquo;public&rdquo; subnet as follows:</p>

<pre><code class="bash ">192.168.0.0/24         eni-ID
10.100.100.0/24        eni-ID
10.100.200.0/24        eni-ID
10.100.300.0/24        eni-ID
</code></pre>

<p>The ID is the &ldquo;network interface&rdquo; object you mapped your elastic IP to (attached to your VPN instance). The private class C address is my OpenVPN client network, the other
3 are the LANs behind the pfSense VPN server. You also have to remember, that all instances MUST have elastic IP associated to them inside your &ldquo;public&rdquo; VPC subnet, they
will not be able to use the VPN router instance!</p>

<p>Create another custom &ldquo;route&rdquo; object, associate it with your &ldquo;private&rdquo; VPC subnet eg: <code>10.0.1.0/24</code> and add the following route to it:</p>

<pre><code class="bash">0.0.0.0/0          eni-ID
</code></pre>

<p>This will add default route to all instances for your &ldquo;private&rdquo; VPC subnet via the router EC2 instance. This &ldquo;route&rdquo; object can be then associated with any other &ldquo;private&rdquo;
subnet you may create later on and required to support outgoing Internet access.</p>

<p>To be able to route any private subnet via your router EC2 instance, you MUST disable source and destination check on the associated network interface object.</p>

<pre><code class="bash">$ aws --region eu-central-1 ec2 modify-network-interface-attribute --network-interface-id "eni-12f235ec" --no-source-dest-check
</code></pre>

<h4>Prepare the OpenVPN Server on pfSense</h4>

<p>You will need to create a <code>ccd</code> entry for your VPC EC2 instance to ensure, that the client always gets the same tunnel IP from the server, as well as for the ability to be
able to publish the remote networks on the client side to the server. It&rsquo;s very simple with the web-ui of pfSense, hence I just show the relevant config entry here, should
you need to set this on console:</p>

<pre><code class="bash">ifconfig-push 192.168.0.254 192.168.0.253
iroute 10.0.0.0 255.255.255.0
iroute 10.0.1.0 255.255.255.0
</code></pre>

<p>These routes however required to be added to the relevant server config too (if your run multiple). Again, this is easy on web-ui, relevant config entries are:</p>

<pre><code class="bash">route 10.0.0.0 255.255.255.0
route 10.0.1.0 255.255.255.0
push "route 10.100.100.0 255.255.255.0"
push "route 10.100.200.0 255.255.255.0"
push "route 10.100.300.0 255.255.255.0"
push "route 10.0.0.0 255.255.255.0"
push "route 10.0.1.0 255.255.255.0"
</code></pre>

<p>Why the redundant route and iroute statements, you might ask? The reason is that route controls the routing from the kernel to the OpenVPN server (via the TUN interface)
while iroute controls the routing from the OpenVPN server to the remote clients.</p>

<p>And finally, the push-route lines add networks to all VPN clients for all networks available on both side of the tunnel between pfSense and VPC. The reason for this is that
when I connect to the pfSense VPN server with my laptop, I want routes set for both, the office and the VPC networks so I can reach everything while away.</p>

<h2>Launch the Router Instance</h2>

<p>The only thing you need to pay attention to:</p>

<ul>
<li>Ensure that you launch the instance to the correct &ldquo;public&rdquo; subnet of your VPC</li>
<li>Ensure you set the instance to use the prepared &ldquo;network interface&rdquo; object</li>
</ul>


<p>Once running, you should be able to reach it via SSH protocol over its public address. Depending on your distro of choice, you may need to turn on routing if not enabled by
default in the kernel:</p>

<pre><code class="bash">sysctl -w net.ipv4.ip_forward=1
</code></pre>

<p>OR</p>

<pre><code class="bash">echo 1 &gt; /proc/sys/net/ipv4/ip_forward
</code></pre>

<p>Install then configure your OpenVPN client, set it to run at boot, start, etc. Note: there is nothing specific you need to configure as long as you run client here.
Add a couple of iptables rules to NAT traffic coming from your VPC destined to the Internet:</p>

<pre><code class="bash">iptables -A POSTROUTING -s 10.0.0.0/16 -d 10.0.0.0/16 -m comment --comment "VPC-&gt;VPC:SKIP" -j ACCEPT
iptables -A POSTROUTING -s 10.0.0.0/16 -d 10.100.0.0/16 -m comment --comment "AWS-&gt;REMOTE SUBNETS:SKIP" -j ACCEPT
iptables -A POSTROUTING -o eth0 -s 10.0.1.0/24 -m comment --comment "SUBNET-PRIVATE-&gt;INTERNET:MASQ" -j SNAT --to-source 10.0.0.8
</code></pre>

<p>We need the ACCEPT rules to avoid rewriting traffic between VPC subnets as well as between VPC and remote subnets, otherwise they have no affect. Make sure you save the
rules and enable firewall service to run during boot. Note: this config assumes you have NO other firewall rules configured, those should be added when you have working
routing.</p>

<p>You should be able to reach your instance after all this via it&rsquo;s private address. When you have a working setup, remove the SSH entry from the &ldquo;security group&rdquo; of your
VPC for additional safety.</p>
]]></content>
  </entry>
  
</feed>
